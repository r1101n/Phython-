1- create a txt file and put 4-5 lines. Now create another file from the previous file and at the end of each line put the count of words.

example :
file 1:
this is namaste sql course
this is python course
this assinment is part of day4 lecture


file2:this is namaste sql course:5
this is python course:4
this assignment is part of day4 lecture:7

solution:
# Create the first file and write lines into it
with open('file1.txt', 'w') as file1:
    lines = [
        "this is namaste sql course",
        "this is python course",
        "this assignment is part of day4 lecture"
    ]
    for line in lines:
        file1.write(line + '\n')

# Create the second file with word count at the end of each line
with open('file1.txt', 'r') as file1, open('file2.txt', 'w') as file2:
    for line in file1:
        line = line.strip()
        word_count = len(line.split())
        file2.write(line + ':' + str(word_count) + '\n')

print("File creation and word count operation completed!")



2- given below dictonaries of states and their capital:

capitals_dict = {
'Alabama': 'Montgomery',
'Alaska': 'Juneau',
'Arizona': 'Phoenix',
'Arkansas': 'Little Rock',
'California': 'Sacramento',
'Colorado': 'Denver',
'Connecticut': 'Hartford',
'Delaware': 'Dover',
'Florida': 'Tallahassee',
'Georgia': 'Atlanta',
}

pick a state from above dictonary and ask user to enter the capital of the state.If the user answers incorrectly, then repeatedly ask them
for the capital until they either enter the correct answer or type "exit".
If the user answers correctly, then display "Correct" and end the program. However, if the user exits without guessing correctly, display
the correct answer and the word "Goodbye".

Note: Make sure the user isn’t punished for case sensitivity. In other words, a guess of "Denver" is the same as "denver". Do the same for exiting—"EXIT" and "Exit" should work the same as "exit".

solution:
capitals_dict = {
    'Alabama': 'Montgomery',
    'Alaska': 'Juneau',
    'Arizona': 'Phoenix',
    'Arkansas': 'Little Rock',
    'California': 'Sacramento',
    'Colorado': 'Denver',
    'Connecticut': 'Hartford',
    'Delaware': 'Dover',
    'Florida': 'Tallahassee',
    'Georgia': 'Atlanta'
}

state = input("Enter state")
if state in capitals_dict:
   capital=input("enter capital")

   while True:
     if capital == capitals_dict[state]:
        print("wow")
        break
     elif capital == "exit":
        print("thanks for playing")
        break
     else:
        print("sorry try again or exit")
        capital=input("enter capital")
else:
    print("state not there")



3- write a program to take state as input from user and print the capital of the state using above dictonary. If the state is not there in dictonary then print "sorry , information not available"

capitals_dict = {
    'Alabama': 'Montgomery',
    'Alaska': 'Juneau',
    'Arizona': 'Phoenix',
    'Arkansas': 'Little Rock',
    'California': 'Sacramento',
    'Colorado': 'Denver',
    'Connecticut': 'Hartford',
    'Delaware': 'Dover',
    'Florida': 'Tallahassee',
    'Georgia': 'Atlanta'
}

state = input("Enter state")
state= state.capitalize()
if state in capitals_dict:
  capital = capitals_dict[state]
  print(f"state is {state}so capital is {capital}")
else:
    print("not there in state write correct state name")

4- Let say You have one 100 cats.
One day, you decide to arrange all your cats in a giant circle. Initially,none of your cats has a hat on.
You walk around the circle a 100 times, always starting with the first cat (cat #1). 
Each time you stop at a cat, you check if it has a hat on. If it doesn’t, then you put a hat on it. If it does, then you take the hat off.

1. The first round, you stop at every cat, placing a hat on each one.
2. The second round, you stop only at every second cat (#2, #4, #6,
#8, and so on).
3. The third round, you stop only at every third cat (#3, #6, #9, #12,
and so on).
4. You continue this process until you’ve made one hundred rounds
around the cats. On the last round, you stop only at cat #100.


Write a program that simply outputs which cats have hats at the end.

solution:

# by default all are set to false since none have been visited
cats = [False] * (100 + 1)
cats_with_hats_on = []
    # We want to walk around the circle 100 times
    for num in range(1, 100 + 1):
        # Each time we walk around, we visit 100 cats
        for cat in range(1, 100 + 1):
            # Determine whether to visit the cat
            # Use modulo operator to visit every 2nd, 3rd, 4th,... etc.
            if cat % num == 0:
                # Remove or add hat depending on
                # whether the cat already has one
                if array_of_cats[cat] is True:
                    array_of_cats[cat] = False
                else:
                    array_of_cats[cat] = True

    # Add all number of each cat with a hat to list
    for cat in range(1, 100 + 1):
        if array_of_cats[cat] is True:
            cats_with_hats_on.append(cat)


print(get_cats_with_hats(cats))