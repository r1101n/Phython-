1- for the day 4 and day 3 assignments convert all the programs to functions

2- write a Python function which takes a positive number as input and return the factorial of the number.

def factorial(n):
    n= int(n)
    if n < 0:
        return "Error :Input should be positive"
    elif n==0 or n==1:
        return 1
    else:
        result= 1
        for i in range(2,n+1):
            result *= i
        return result

#work it
num = input("enter number")
result_fact = factorial(num)
print(result_fact)


3- Write a Python function that accepts a string and counts the number of upper and lower case letters.
Sample String : 'The quick Brow Fox'
Expected Output :
No. of Upper case characters : 3
No. of Lower case Characters : 12

def letter_count(str):
      upper=0
      lower=0
      for char in str:
          if char.isupper():
              upper +=1
          elif char.islower():
              lower +=1
      return upper,lower


#example
String= "The quick Brow Fox"
result = letter_count(String)
print(result)


4- Write a Python function that takes a list and returns a new list with distinct elements from the first list.
Sample List : [1,2,3,3,3,3,4,5]
Unique List : [1, 2, 3, 4, 5]

def distinctlist(list):
    unique_list =[]
    for i in list:
        if i  not in unique_list:
            unique_list.append(i)
        else:
            continue
    return unique_list
#example
sample_list = [1, 2, 3, 3, 3, 3, 4, 5]
result = distinctlist(sample_list)
print(result)


5- Write a Python function that checks whether a passed string is a palindrome or not.
Note: A palindrome is a word, phrase,
or sequence that reads the same backward as forward, e.g., madam.

def palindrome(str):
    reverse_string=""
    for i in str:
        reverse_string = i + reverse_string
    if reverse_string == str:
            return "palindrome"
    else:
            return "it is not a palindrome"
#example
takeInput= input("Enter string")
result = palindrome(takeInput)
print(result)


6- Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
Sample Items : green-red-yellow-black-white
Expected Result : black-green-red-white-yellow

sequence = input("Enter a hyphen-separated sequence of words: ")
words = sequence.split('-')  # Split the sequence into individual words

sorted_words = sorted(words)  # Sort the words alphabetically

result = '-'.join(sorted_words)  # Join the sorted words with hyphens

# Alternative method without using join()
result = ''
for word in sorted_words:
    result += word + '-'

result = result.rstrip('-')  # Remove the trailing hyphen

print("Sorted hyphen-separated sequence: ", result)


7- write a python function that accepts a string and prints the count of occurence of each characters
sample string: aabccda
expected result:
a -> 3
b-> 1
c-> 2
d -> 1

def count_characters(s):
    # Create an empty dictionary to store character counts
    char_count = {}

    # Iterate through each character in the string
    for char in s:
        # Check if the character is already in the dictionary
        if char in char_count:
            # If it is, increment its count by 1
            char_count[char] += 1
        else:
            # If it's not, add it to the dictionary with count 1
            char_count[char] = 1

    # Print the count of each character
    for char, count in char_count.items():
        print(f"Character '{char}' occurs {count} times")


# Example usage
sample_string = "aabccda"
count_characters(sample_string)



8- write a function called is_prime that takes an integer as an argument and returns True if it is a prime number, and False otherwise.

def is_prime(number):
    if number <= 1:
        return False

    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False

    return True

# Example usage
input_number = int(input("Enter a number: "))
if is_prime(input_number):
    print("The number is prime.")
else:
    print("The number is not prime.")


9- write a function called generate_fibonacci that takes an integer n as input and returns a list of the first n Fibonacci numbers.

def fibo(num):
    # Initialize the first two Fibonacci numbers
    first, second = 0, 1
    # List to store Fibonacci sequence
    fibonacci_sequence = []

    # Iterate 'num' times to generate Fibonacci numbers
    for _ in range(num):
        # Append the current Fibonacci number to the sequence
        fibonacci_sequence.append(first)
        # Calculate the next Fibonacci number
        first, second = second, first + second

    return fibonacci_sequence


# Example usage
a = int(input("Enter the number of Fibonacci numbers to generate: "))
result = fibo(a)
print(result)


10- Write a function called capitalize_odd_letters that takes a string as input and returns the same string with the odd-indexed letters capitalized.

def capitalize_odd_letters(string):
    capitalized_string = ""

    for i in range(len(string)):
        if i % 2 == 1:  # Check if the index is odd
            capitalized_string += string[i].upper()
        else:
            capitalized_string += string[i]

    return capitalized_string

# Example usage
input_string = input("Enter a string: ")
result = capitalize_odd_letters(input_string)
print("Modified string:", result)


11- write a function called find_common_elements that takes two lists as input and returns a new list containing the common elements between the two lists.

def find_common_elements(list1, list2):
    common_elements = []

    for element in list1:
        if element in list2:
            common_elements.append(element)

    return common_elements

# Example usage
input_list1 = [1, 2, 3, 4, 5]
input_list2 = [4, 5, 6, 7, 8]
result = find_common_elements(input_list1, input_list2)
print("Common elements:", result)


